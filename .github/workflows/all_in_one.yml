name: Terragrunt

on:
  push:
    branches:
      - 'main'
      - 'dev'

env:
  tf_version: '1.1.9'
  tg_version: '0.36.8'
  prod_tf_working_dir: 'prod/'
  dev_tf_working_dir: 'dev/'

jobs:

  prod_validate:
    name: Validate Prod

    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.1.0
        with:
          terragrunt_version: ${{ env.tg_version }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.tf_version }}
          terraform_wrapper: false
      
      - name: Terragrunt hclfmt
        working-directory: ${{ env.prod_tf_working_dir }}
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.PROD_GOOGLE_CREDENTIALS }}
        run: terragrunt hclfmt
      
      - name: Terragrunt run-all init
        working-directory: ${{ env.prod_tf_working_dir }}
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.PROD_GOOGLE_CREDENTIALS }}
        run: terragrunt run-all init
      
      - name: Terragrunt run-all validate
        working-directory: ${{ env.prod_tf_working_dir }}
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.PROD_GOOGLE_CREDENTIALS }}
        run: terragrunt run-all validate
      
      - name: Terragrunt run-all plan
        working-directory: ${{ env.prod_tf_working_dir }}
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.PROD_GOOGLE_CREDENTIALS }}
        run: terragrunt run-all plan

  dev_validate:
    name: Validate Dev

    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.1.0
        with:
          terragrunt_version: ${{ env.tg_version }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.tf_version }}
          terraform_wrapper: false
      
      - name: Terragrunt hclfmt
        working-directory: ${{ env.dev_tf_working_dir }}
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.DEV_GOOGLE_CREDENTIALS }}
        run: terragrunt hclfmt
      
      - name: Terragrunt run-all init
        working-directory: ${{ env.dev_tf_working_dir }}
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.DEV_GOOGLE_CREDENTIALS }}
        run: terragrunt run-all init
      
      - name: Terragrunt run-all validate
        working-directory: ${{ env.dev_tf_working_dir }}
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.DEV_GOOGLE_CREDENTIALS }}
        run: terragrunt run-all validate
      
      - name: Terragrunt run-all plan
        working-directory: ${{ env.dev_tf_working_dir }}
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.DEV_GOOGLE_CREDENTIALS }}
        run: terragrunt run-all plan

  prod_apply:
    name: Apply Prod
    if: ${{ env.ACT && github.ref == 'refs/heads/main' && github.event_name == 'push' }}
    runs-on: ubuntu-latest
    needs: prod_validate
    steps:

      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.1.0
        with:
          terragrunt_version: ${{ env.tg_version }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.tf_version }}
          terraform_wrapper: false
      
      - name: Terragrunt run-all apply
        working-directory: ${{ env.prod_tf_working_dir }}
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.PROD_GOOGLE_CREDENTIALS }}
        run: terragrunt run-all apply --terragrunt-non-interactive

  dev_apply:
    name: Apply Dev
    if: ${{ env.ACT && github.ref == 'refs/heads/dev' && github.event_name == 'push' }}
    runs-on: ubuntu-latest
    needs: dev_validate
    steps:

      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.1.0
        with:
          terragrunt_version: ${{ env.tg_version }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.tf_version }}
          terraform_wrapper: false
      
      - name: Terragrunt run-all apply
        working-directory: ${{ env.dev_tf_working_dir }}
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.DEV_GOOGLE_CREDENTIALS }}
        run: terragrunt run-all apply --terragrunt-non-interactive

  dev_get_test_inputs:
    if: ${{ env.ACT && github.ref == 'refs/heads/dev' && github.event_name == 'push' }}
    name: Output Dev
    runs-on: ubuntu-latest
    needs: dev_apply
    outputs:
      load_balancer_ip: ${{ steps.teraform_output.outputs.load_balancer_ip }}
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.1.0
        with:
          terragrunt_version: ${{ env.tg_version }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.tf_version }}
          terraform_wrapper: false

      - name: Terragrunt run-all init
        working-directory: ${{ env.dev_tf_working_dir }}
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.DEV_GOOGLE_CREDENTIALS }}
        run: terragrunt run-all init

      - name: teraform_output
        id: teraform_output
        working-directory: dev/us-west1/shared-non_istio/timestamp/
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.DEV_GOOGLE_CREDENTIALS }}
        run: echo "::set-output name=load_balancer_ip::$(terragrunt output -raw load_balancer_ip)"

  functional_test:
    if: ${{ env.ACT && github.ref == 'refs/heads/dev' && github.event_name == 'push' }}
    name: Timestamp k6 Test
    runs-on: ubuntu-latest
    needs: dev_get_test_inputs
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: test_echo
        run: |
          echo "test output: " 
          echo ${{ needs.get_test_inputs.outputs.load_balancer_ip }}
          pwd

      - name: Run k6 local test
        uses: grafana/k6-action@v0.2.0

        env:
          TIMESTAMP_LB_IP: ${{ needs.get_test_inputs.outputs.load_balancer_ip }}
        with:
          filename: tests/timestamp_functional.js